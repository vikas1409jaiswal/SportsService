// <auto-generated />
using System;
using CricketService.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CricketService.Data.Migrations
{
    [DbContext(typeof(CricketServiceContext))]
    partial class CricketServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CricketService.Data.Entities.CricketPlayerInfoDTO", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string[]>("Contents")
                        .HasColumnType("text[]")
                        .HasColumnName("contents");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("jsonb")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DateOfDeath")
                        .HasColumnType("jsonb")
                        .HasColumnName("date_of_death");

                    b.Property<string>("DebutDetails")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("debut_details");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("extra_info");

                    b.Property<string>("Formats")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("formats");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("href");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("InternationalTeamNames")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("international_team_names");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TeamNames")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("team_names");

                    b.HasKey("Uuid");

                    b.ToTable("cricket_players_info");
                });

            modelBuilder.Entity("CricketService.Data.Entities.CricketTeamHistoryDTO", b =>
                {
                    b.Property<Guid>("MatchUuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("match_uuid");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("format");

                    b.Property<string>("InstantTeamsRecords")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("instant_teams_records");

                    b.Property<int>("MatchNumber")
                        .HasColumnType("integer")
                        .HasColumnName("match_number");

                    b.HasKey("MatchUuid");

                    b.ToTable("cricket_teams_history");
                });

            modelBuilder.Entity("CricketService.Data.Entities.CricketTeamHistoryH2hDTO", b =>
                {
                    b.Property<Guid>("MatchUuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("match_uuid");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("format");

                    b.Property<string>("InstantTeamsRecords")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("instant_teams_records");

                    b.Property<int>("MatchNumber")
                        .HasColumnType("integer")
                        .HasColumnName("match_number");

                    b.Property<string>("Team1Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("team1_name");

                    b.Property<string>("Team2Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("team2_name");

                    b.HasKey("MatchUuid");

                    b.ToTable("cricket_teams_history_h2h");
                });

            modelBuilder.Entity("CricketService.Data.Entities.CricketTeamInfoDTO", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("FlagUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("flag_url");

                    b.Property<string>("Formats")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("formats");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("ODIRecords")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("odi_records");

                    b.Property<string>("T20IRecords")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("t20i_records");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("team_name");

                    b.Property<string>("TestRecords")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("test_records");

                    b.HasKey("Uuid");

                    b.ToTable("cricket_teams_info");
                });

            modelBuilder.Entity("CricketService.Data.Entities.CricketTeamPlayerInfos", b =>
                {
                    b.Property<Guid>("TeamUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("team_uuid");

                    b.Property<Guid>("PlayerUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("player_uuid");

                    b.Property<string>("CareerStatistics")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("career_statistics");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_name");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("team_name");

                    b.HasKey("TeamUuid", "PlayerUuid");

                    b.HasIndex("PlayerUuid");

                    b.ToTable("cricket_teams_and_players_info");
                });

            modelBuilder.Entity("CricketService.Data.Entities.LimitedOverInternationalMatchInfoDTO", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("InternationalDebut")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("international_debut");

                    b.Property<string>("MatchDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_date");

                    b.Property<string>("MatchNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_number");

                    b.Property<string>("MatchReferee")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_referee");

                    b.Property<string>("MatchTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_title");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_type");

                    b.Property<string>("PlayerOfTheMatch")
                        .HasColumnType("jsonb")
                        .HasColumnName("player_of_the_match");

                    b.Property<string>("ReserveUmpire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reserve_umpire");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("season");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("series");

                    b.Property<string>("SeriesResult")
                        .HasColumnType("text")
                        .HasColumnName("series_result");

                    b.Property<string>("Team1")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team1_details");

                    b.Property<string>("Team2")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team2_details");

                    b.Property<string>("TossDecision")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("toss_decision");

                    b.Property<string>("TossWinner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("toss_winner");

                    b.Property<string>("TvUmpire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tv_umpire");

                    b.Property<string[]>("Umpires")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("umpires");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("venue");

                    b.HasKey("Uuid");

                    b.ToTable("limited_over_international_matches");
                });

            modelBuilder.Entity("CricketService.Data.Entities.T20MatchInfoDTO", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("FormatDebut")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("format_debut");

                    b.Property<string>("MatchDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_date");

                    b.Property<string>("MatchNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_number");

                    b.Property<string>("MatchReferee")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_referee");

                    b.Property<string>("MatchTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_title");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_type");

                    b.Property<string>("PlayerOfTheMatch")
                        .HasColumnType("jsonb")
                        .HasColumnName("player_of_the_match");

                    b.Property<string>("ReserveUmpire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reserve_umpire");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("season");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("series");

                    b.Property<string>("SeriesResult")
                        .HasColumnType("text")
                        .HasColumnName("series_result");

                    b.Property<string>("Team1")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team1_details");

                    b.Property<string>("Team2")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team2_details");

                    b.Property<string>("TossDecision")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("toss_decision");

                    b.Property<string>("TossWinner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("toss_winner");

                    b.Property<string>("TvUmpire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tv_umpire");

                    b.Property<string[]>("Umpires")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("umpires");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("venue");

                    b.HasKey("Uuid");

                    b.ToTable("t20_matches");
                });

            modelBuilder.Entity("CricketService.Data.Entities.TestCricketMatchInfoDTO", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("InternationalDebut")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("international_debut");

                    b.Property<string>("MatchDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_date");

                    b.Property<string>("MatchNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_number");

                    b.Property<string>("MatchReferee")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_referee");

                    b.Property<string>("MatchTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_title");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_type");

                    b.Property<string>("PlayerOfTheMatch")
                        .HasColumnType("jsonb")
                        .HasColumnName("player_of_the_match");

                    b.Property<string>("ReserveUmpire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reserve_umpire");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("season");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("series");

                    b.Property<string>("SeriesResult")
                        .HasColumnType("text")
                        .HasColumnName("series_result");

                    b.Property<string>("Team1")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team1_details");

                    b.Property<string>("Team2")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team2_details");

                    b.Property<string>("TossDecision")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("toss_decision");

                    b.Property<string>("TossWinner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("toss_winner");

                    b.Property<string>("TvUmpire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tv_umpire");

                    b.Property<string[]>("Umpires")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("umpires");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("venue");

                    b.HasKey("Uuid");

                    b.ToTable("test_cricket_matches");
                });

            modelBuilder.Entity("CricketService.Data.Entities.CricketTeamPlayerInfos", b =>
                {
                    b.HasOne("CricketService.Data.Entities.CricketPlayerInfoDTO", "PlayerInfo")
                        .WithMany("TeamsPlayersInfos")
                        .HasForeignKey("PlayerUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CricketService.Data.Entities.CricketTeamInfoDTO", "TeamInfo")
                        .WithMany("TeamsPlayersInfos")
                        .HasForeignKey("TeamUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerInfo");

                    b.Navigation("TeamInfo");
                });

            modelBuilder.Entity("CricketService.Data.Entities.CricketPlayerInfoDTO", b =>
                {
                    b.Navigation("TeamsPlayersInfos");
                });

            modelBuilder.Entity("CricketService.Data.Entities.CricketTeamInfoDTO", b =>
                {
                    b.Navigation("TeamsPlayersInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
